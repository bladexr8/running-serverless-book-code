AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  app

  Sample SAM Template for app
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  AppStage:
    Type: String
    Default: api
    Description: API Gateway Stage, used as a prefix for the endpoint URLs
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 1
    ConstraintDescription: "1-10 Latin letters"
  UploadLimitInMB:
    Type: Number
    Default: 5
    Description: Maximum upload size in megabytes
    MinValue: 1
    MaxValue: 100
  ContactEmailAddress:
    Type: String
    Description: Email address for operational notifications
    Default: ''

# Conditions to activate/de-activate resources
Conditions:
  # check ContactEmailAddress isn't a blank string
  ContactEmailSet: !Not [ !Equals ['', !Ref ContactEmailAddress]]

Resources:
  # explicitly create API Gateway, rather than auto-create
  # create custom stage using global AppStage parameter
  WebApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref AppStage
  # S3 Bucket to persist information with server side encryption
  UploadS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  # S3 bucket to store image thumbnails
  ThumbnailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ShowFormFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: user-form/
      Handler: show-form.lambdaHandler
      Runtime: nodejs12.x
      # AutoPublishAlias: live
      Events:
        ShowForm:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref WebApi
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
          UPLOAD_LIMIT_IN_MB: !Ref UploadLimitInMB
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
  ConfirmUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-form/
      Handler: confirm-upload.lambdaHandler
      Runtime: nodejs12.x    
      Events:  
        ConfirmForm:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /confirm
            Method: get
            RestApiId: !Ref WebApi
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref ThumbnailsS3Bucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
  ConvertFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: image-conversion/
      Handler: index.handler
      Runtime: nodejs12.x    
      Events:  
        FileUploaded:
          Type: S3
          Properties:
            Bucket: !Ref UploadS3Bucket
            Events: s3:ObjectCreated:*
      Timeout: 600
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref ThumbnailsS3Bucket
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref NotifyAdmins
  
  # policy to allow ConvertFunction to read from
  # uploads S3 bucket. Avoids circular dependency
  # where the upload bucket depends on the
  # conversion function, which depends on the role,
  # which depends on the bucket
  ConvertFunctionCanReadUploads:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConvertFunctionCanReadUploads
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - "s3:GetObject"
            Resource:
              - !Sub "${UploadS3Bucket.Arn}/*"
      Roles:
        - !Ref ConvertFileFunctionRole
  
  # SNS Topic for Dead Letter Queue
  NotifyAdmins:
    Type: AWS::SNS::Topic

  # set up subscription to SNS Dead Letter Queue
  # if Contact Email set
  AlarmNotifyOpsSubscription:
    Type: AWS::SNS::Subscription
    Condition: ContactEmailSet
    Properties:
      Endpoint: !Ref ContactEmailAddress
      Protocol: email
      TopicArn: !Ref NotifyAdmins

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UserFormApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
  ShowFormFunction:
    Description: "Show Form Lambda Function ARN"
    Value: !GetAtt ShowFormFunction.Arn
  ShowFormFunctionIamRole:
    Description: "Implicit IAM Role created for ShowForm function"
    Value: !GetAtt ShowFormFunctionRole.Arn
  ConfirmUploadFunction:
    Description: "Confirm Upload Form Lambda Function ARN"
    Value: !GetAtt ConfirmUploadFunction.Arn
  ConfirmUploadFunctionIamRole:
    Description: "Implicit IAM Role created for Cofirm Upload function"
    Value: !GetAtt ConfirmUploadFunctionRole.Arn
  uploadBucket:
    Description: "S3 Bucket for uploaded files"
    Value: !Ref UploadS3Bucket
  thumbnailsBucket:
    Description: "S3 Bucket for thumbnails"
    Value: !Ref ThumbnailsS3Bucket
