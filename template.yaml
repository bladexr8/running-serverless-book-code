AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  app

  Sample SAM Template for app

# SAM Build and Packaging Commands
# $ sam build
# $ sam package --s3-bucket spm-sam-project-deployment --output-template-file output.yaml
# $ sam deploy --template-file output.yaml --stack-name sam-test-1 --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

# configurable parameters. Can be
# overridden during deployment
Parameters:
  AppStage:
    Type: String
    Default: api
    Description: API Gateway Stage, used as a prefix for the endpoint URLs
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 1
    ConstraintDescription: "1-10 Latin letters"
  UploadLimitInMB:
    Type: Number
    Default: 5
    Description: Maximum upload size in megabytes
    MinValue: 1
    MaxValue: 100
  ContactEmailAddress:
    Type: String
    Description: Email address for operational notifications
    Default: ''
  ThumbnailWidth:
    Type: Number
    Default: 300
    Description: Thumbnail width in pixels
    MinValue: 10
    MaxValue: 1000

# Conditions to activate/de-activate resources
Conditions:
  # check ContactEmailAddress isn't a blank string
  ContactEmailSet: !Not [ !Equals ['', !Ref ContactEmailAddress]]

Resources:
  # explicitly create API Gateway, rather than auto-create
  # create custom stage using global AppStage parameter
  WebApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref AppStage
      # support CORS from Web Assets S3 Bucket
      Cors: !Sub "'${WebAssetsS3Bucket.WebsiteURL}'"
  # S3 Bucket to persist information with server side encryption
  UploadS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - !GetAtt WebAssetsS3Bucket.WebsiteURL
            MaxAge: 3600

  # S3 bucket to store image thumbnails
  ThumbnailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - !GetAtt WebAssetsS3Bucket.WebsiteURL
            MaxAge: 3600
  # Web Assets bucket
  WebAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.html

  ShowFormFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: user-form/
      Handler: show-form.lambdaHandler
      Runtime: nodejs12.x
      # AutoPublishAlias: live
      Events:
        ShowForm:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref WebApi
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
          UPLOAD_LIMIT_IN_MB: !Ref UploadLimitInMB
          CORS_ORIGIN: !GetAtt WebAssetsS3Bucket.WebsiteURL
          THUMBNAILS_S3_BUCKET: !Ref ThumbnailsS3Bucket
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
        - S3ReadPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
  ConvertFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: image-conversion/
      Handler: index.handler
      Runtime: nodejs12.x    
      Events:  
        FileUploaded:
          Type: S3
          Properties:
            Bucket: !Ref UploadS3Bucket
            Events: s3:ObjectCreated:*
      Timeout: 600
      MemorySize: 1024
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref ThumbnailsS3Bucket
          THUMB_WIDTH: !Ref ThumbnailWidth
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref NotifyAdmins
      Layers:
        - !GetAtt ImageMagick.Outputs.LayerVersion
  
  # policy to allow ConvertFunction to read from
  # uploads S3 bucket. Avoids circular dependency
  # where the upload bucket depends on the
  # conversion function, which depends on the role,
  # which depends on the bucket
  ConvertFunctionCanReadUploads:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConvertFunctionCanReadUploads
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - "s3:GetObject"
            Resource:
              - !Sub "${UploadS3Bucket.Arn}/*"
      Roles:
        - !Ref ConvertFileFunctionRole
  
  # SNS Topic for Dead Letter Queue
  NotifyAdmins:
    Type: AWS::SNS::Topic

  # set up subscription to SNS Dead Letter Queue
  # if Contact Email set
  AlarmNotifyOpsSubscription:
    Type: AWS::SNS::Subscription
    Condition: ContactEmailSet
    Properties:
      Endpoint: !Ref ContactEmailAddress
      Protocol: email
      TopicArn: !Ref NotifyAdmins

  # add ImageMagick from the Serverless Application
  # Repository. This will be made available as a layer
  # Layer will appear in the /opt directory of the
  # Lambda runtime
  # https://serverlessrepo.aws.amazon.com/applications
  # https://github.com/serverlesspub/imagemagick-aws-lambda-2
  ImageMagick:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:145266761615:applications/image-magick-lambda-layer
        SemanticVersion: 1.0.0

  # Support for Deploying Files to S3
  DeployToS3:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 1.0.0
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt DeployToS3.Outputs.Arn
      CodeUri: web-site/
      AutoPublishAlias: production
      Runtime: python3.7
      Handler: deployer.resource_handler
      Timeout: 600
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref WebAssetsS3Bucket
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"
      TargetBucket: !Ref WebAssetsS3Bucket
      Substitutions:
        FilePattern: "*.html"
        Values:
          API_URL: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
      Acl: 'public-read'
      CacheControlMaxAge: 600

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UserFormApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
  ShowFormFunction:
    Description: "Show Form Lambda Function ARN"
    Value: !GetAtt ShowFormFunction.Arn
  ShowFormFunctionIamRole:
    Description: "Implicit IAM Role created for ShowForm function"
    Value: !GetAtt ShowFormFunctionRole.Arn
  uploadBucket:
    Description: "S3 Bucket for uploaded files"
    Value: !Ref UploadS3Bucket
  thumbnailsBucket:
    Description: "S3 Bucket for thumbnails"
    Value: !Ref ThumbnailsS3Bucket
  webAssetsBucket:
    Description: "S3 Bucket for Web Assets"
    Value: !Ref WebAssetsS3Bucket
  WebUrl:
    Description: "Public web URL"
    Value: !GetAtt WebAssetsS3Bucket.WebsiteURL
